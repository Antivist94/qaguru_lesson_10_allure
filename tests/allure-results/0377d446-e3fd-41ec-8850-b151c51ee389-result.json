{"name": "test_github_search_without_allure_steps", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#query-builder-test')).send keys\n\nReason: ElementNotInteractableException: element not interactable\n  (Session info: chrome=126.0.6478.127)\nScreenshot: file:///Users/tochka/.selene/screenshots/1720470286387/1720470286387.png\nPageSource: file:///Users/tochka/.selene/screenshots/1720470286387/1720470286387.html", "trace": "fn = <selene.core.wait.Command object at 0x103fa5f70>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.venv/lib/python3.12/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n../.venv/lib/python3.12/site-packages/selene/core/entity.py:469: in <lambda>\n    self.wait.command('send keys', lambda element: element().send_keys(*value))\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x104d730e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...000198982f94 _pthread_start + 136\\\\n18  libsystem_pthread.dylib             0x000000019897dd34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000105012a80 chromedriver + 4385408\nE       1   chromedriver                        0x000000010500b38c chromedriver + 4354956\nE       2   chromedriver                        0x0000000104c28970 chromedriver + 280944\nE       3   chromedriver                        0x0000000104c65f70 chromedriver + 532336\nE       4   chromedriver                        0x0000000104c64918 chromedriver + 526616\nE       5   chromedriver                        0x0000000104c61734 chromedriver + 513844\nE       6   chromedriver                        0x0000000104ca3d24 chromedriver + 785700\nE       7   chromedriver                        0x0000000104c5feec chromedriver + 507628\nE       8   chromedriver                        0x0000000104c608c4 chromedriver + 510148\nE       9   chromedriver                        0x0000000104fda43c chromedriver + 4154428\nE       10  chromedriver                        0x0000000104fdeea0 chromedriver + 4173472\nE       11  chromedriver                        0x0000000104fbfff8 chromedriver + 4046840\nE       12  chromedriver                        0x0000000104fdf78c chromedriver + 4175756\nE       13  chromedriver                        0x0000000104fb2fb8 chromedriver + 3993528\nE       14  chromedriver                        0x0000000104ffd21c chromedriver + 4297244\nE       15  chromedriver                        0x0000000104ffd398 chromedriver + 4297624\nE       16  chromedriver                        0x000000010500af84 chromedriver + 4353924\nE       17  libsystem_pthread.dylib             0x0000000198982f94 _pthread_start + 136\nE       18  libsystem_pthread.dylib             0x000000019897dd34 thread_start + 8\n\n../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_github_search_without_allure_steps():\n        browser.open(\"https://github.com\")\n        browser.element('//div[@data-action=\"click:qbsearch-input#searchInputContainerClicked\"]').click()\n>       browser.element('#query-builder-test').send_keys('repo:Antivist94/qaguru_lesson_10_allure').press_enter()\n\ntest_github_issue_clean.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../.venv/lib/python3.12/site-packages/selene/core/entity.py:469: in send_keys\n    self.wait.command('send keys', lambda element: element().send_keys(*value))\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:161: in command\n    self.for_(Command(description, fn))\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x103fa5f70>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '#query-builder-test')).send keys\nE                   \nE                   Reason: ElementNotInteractableException: element not interactable\nE                     (Session info: chrome=126.0.6478.127)\nE                   Screenshot: file:///Users/tochka/.selene/screenshots/1720470286387/1720470286387.png\nE                   PageSource: file:///Users/tochka/.selene/screenshots/1720470286387/1720470286387.html\n\n../.venv/lib/python3.12/site-packages/selene/core/wait.py:148: TimeoutException"}, "start": 1720470286409, "stop": 1720470294052, "uuid": "5aa0bda9-e5ba-4dd1-969e-5f3668388673", "historyId": "9ad976f82edf6feac4f32c823d065152", "testCaseId": "9ad976f82edf6feac4f32c823d065152", "fullName": "tests.test_github_issue_clean#test_github_search_without_allure_steps", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_github_issue_clean"}, {"name": "host", "value": "EugeneE.local"}, {"name": "thread", "value": "20185-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_github_issue_clean"}]}